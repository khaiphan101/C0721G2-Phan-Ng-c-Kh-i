1. solve Me First

	process.stdin.resume();
	process.stdin.setEncoding('ascii');

	var input_stdin = "";
	var input_stdin_array = "";
	var input_currentline = 0;

	process.stdin.on('data', function (data) {
		input_stdin += data;
	});

	process.stdin.on('end', function () {
		input_stdin_array = input_stdin.split("\n");
		main();    
	});

	function readLine() {
		return input_stdin_array[input_currentline++];
	}

	function solveMeFirst(a, b) {
	  return sum = a + b
	}


	function main() {
		var a = parseInt(readLine());
		var b = parseInt(readLine());;

		var res = solveMeFirst(a, b);
		console.log(res);
		
	}

2. Simple Array Sum
	'use strict';

	const fs = require('fs');

	process.stdin.resume();
	process.stdin.setEncoding('utf-8');

	let inputString = '';
	let currentLine = 0;

	process.stdin.on('data', function(inputStdin) {
		inputString += inputStdin;
	});

	process.stdin.on('end', function() {
		inputString = inputString.split('\n');

		main();
	});

	function readLine() {
		return inputString[currentLine++];
	}

	/*
	 * Complete the 'simpleArraySum' function below.
	 *
	 * The function is expected to return an INTEGER.
	 * The function accepts INTEGER_ARRAY ar as parameter.
	 */

	function simpleArraySum(ar) {
		let sum = 0;
		for(let i = 0; i< ar.length; i++){
			sum += ar[i];
		}
			return sum
	}

	function main() {
		const ws = fs.createWriteStream(process.env.OUTPUT_PATH);

		const arCount = parseInt(readLine().trim(), 10);

		const ar = readLine().replace(/\s+$/g, '').split(' ').map(arTemp => parseInt(arTemp, 10));

		const result = simpleArraySum(ar);

		ws.write(result + '\n');

		ws.end();
	}

3. Compare the Triplets
	'use strict';

	const fs = require('fs');

	process.stdin.resume();
	process.stdin.setEncoding('utf-8');

	let inputString = '';
	let currentLine = 0;

	process.stdin.on('data', function(inputStdin) {
		inputString += inputStdin;
	});

	process.stdin.on('end', function() {
		inputString = inputString.split('\n');

		main();
	});

	function readLine() {
		return inputString[currentLine++];
	}

	/*
	 * Complete the 'compareTriplets' function below.
	 *
	 * The function is expected to return an INTEGER_ARRAY.
	 * The function accepts following parameters:
	 *  1. INTEGER_ARRAY a
	 *  2. INTEGER_ARRAY b
	 */

	function compareTriplets(a, b) {
		// Write your code here
		let arr = [0,0];
		for(let i = 0; i< a.length; i++) {
			if(a[i] > b[i]){
				arr[0]++;
			}
			else if(a[i] < b[i]){
				arr[1]++;
			}
		}
		return arr
	}

	function main() {
		const ws = fs.createWriteStream(process.env.OUTPUT_PATH);

		const a = readLine().replace(/\s+$/g, '').split(' ').map(aTemp => parseInt(aTemp, 10));

		const b = readLine().replace(/\s+$/g, '').split(' ').map(bTemp => parseInt(bTemp, 10));

		const result = compareTriplets(a, b);

		ws.write(result.join(' ') + '\n');

		ws.end();
	}

4. A very big sum
	'use strict';

	const fs = require('fs');

	process.stdin.resume();
	process.stdin.setEncoding('utf-8');

	let inputString = '';
	let currentLine = 0;

	process.stdin.on('data', function(inputStdin) {
		inputString += inputStdin;
	});

	process.stdin.on('end', function() {
		inputString = inputString.split('\n');

		main();
	});

	function readLine() {
		return inputString[currentLine++];
	}

	/*
	 * Complete the 'aVeryBigSum' function below.
	 *
	 * The function is expected to return a LONG_INTEGER.
	 * The function accepts LONG_INTEGER_ARRAY ar as parameter.
	 */

	function aVeryBigSum(ar) {
		// Write your code here
		let sum = 0;
		for(let i = 0; i < ar.length; i++) {
			sum += ar[i];
		}
		return sum;
	}

	function main() {
		const ws = fs.createWriteStream(process.env.OUTPUT_PATH);

		const arCount = parseInt(readLine().trim(), 10);

		const ar = readLine().replace(/\s+$/g, '').split(' ').map(arTemp => parseInt(arTemp, 10));

		const result = aVeryBigSum(ar);

		ws.write(result + '\n');

		ws.end();
	}

5. Diagonal Difference

	'use strict';

	const fs = require('fs');

	process.stdin.resume();
	process.stdin.setEncoding('utf-8');

	let inputString = '';
	let currentLine = 0;

	process.stdin.on('data', function(inputStdin) {
		inputString += inputStdin;
	});

	process.stdin.on('end', function() {
		inputString = inputString.split('\n');

		main();
	});

	function readLine() {
		return inputString[currentLine++];
	}

	/*
	 * Complete the 'diagonalDifference' function below.
	 *
	 * The function is expected to return an INTEGER.
	 * The function accepts 2D_INTEGER_ARRAY arr as parameter.
	 */

	function diagonalDifference(arr) {
		// Write your code here
		let sum1 = 0;
		let sum2 = 0;
		let abs;
		for(let i = 0; i <arr.length; i++) {
			sum1 += arr[i][i];
			sum2 += arr[i][arr.length-1-i];
			
		}
		abs = sum1 - sum2
		return Math.abs(abs)
	}

	function main() {
		const ws = fs.createWriteStream(process.env.OUTPUT_PATH);

		const n = parseInt(readLine().trim(), 10);

		let arr = Array(n);

		for (let i = 0; i < n; i++) {
			arr[i] = readLine().replace(/\s+$/g, '').split(' ').map(arrTemp => parseInt(arrTemp, 10));
		}

		const result = diagonalDifference(arr);

		ws.write(result + '\n');

		ws.end();
	}

6. Plus Minus
	'use strict';

	process.stdin.resume();
	process.stdin.setEncoding('utf-8');

	let inputString = '';
	let currentLine = 0;

	process.stdin.on('data', function(inputStdin) {
		inputString += inputStdin;
	});

	process.stdin.on('end', function() {
		inputString = inputString.split('\n');

		main();
	});

	function readLine() {
		return inputString[currentLine++];
	}

	/*
	 * Complete the 'plusMinus' function below.
	 *
	 * The function accepts INTEGER_ARRAY arr as parameter.
	 */

	function plusMinus(arr) {
		// Write your code here
		let posNum = 0;
		let negNum = 0;
		let zero = 0;
		let ratPos = 0;
		let ratNeg =0;
		let ratZero =0;
		
		for(let i = 0; i < arr.length; i++){
			if(arr[i] > 0) {
				posNum++;
			}
			else if(arr[i] <0) {
				negNum++;
			}
		
			else{
				zero++;
			}
			

		}
		ratPos = posNum/arr.length;
		ratNeg = negNum/arr.length;
		ratZero = zero/arr.length;
		console.log(ratPos)
		console.log(ratNeg)
		console.log(ratZero)
	}

	function main() {
		const n = parseInt(readLine().trim(), 10);

		const arr = readLine().replace(/\s+$/g, '').split(' ').map(arrTemp => parseInt(arrTemp, 10));

		plusMinus(arr);
	}

7. Mini-Max Sum
	'use strict';

	process.stdin.resume();
	process.stdin.setEncoding('utf-8');

	let inputString = '';
	let currentLine = 0;

	process.stdin.on('data', function(inputStdin) {
		inputString += inputStdin;
	});

	process.stdin.on('end', function() {
		inputString = inputString.split('\n');

		main();
	});

	function readLine() {
		return inputString[currentLine++];
	}

	/*
	 * Complete the 'miniMaxSum' function below.
	 *
	 * The function accepts INTEGER_ARRAY arr as parameter.
	 */

	function miniMaxSum(arr) {
		// Write your code here
		let sum = arr[0];
		let min = arr[0];
		let max = arr[0];
		for(let i = 1; i < arr.length; i++) {
			if(min > arr[i]) {
				min = arr[i]
			}
			if(max < arr[i]) {
				max = arr[i]
			}
			sum += arr[i]
		}
		let sumMin = sum - max;
		let sumMax = sum - min;
		console.log(sumMin + ' ' +sumMax)
	} 

	function main() {

		const arr = readLine().replace(/\s+$/g, '').split(' ').map(arrTemp => parseInt(arrTemp, 10));

		miniMaxSum(arr);
	}

8.Birthday cake candles
	'use strict';

	const fs = require('fs');

	process.stdin.resume();
	process.stdin.setEncoding('utf-8');

	let inputString = '';
	let currentLine = 0;

	process.stdin.on('data', function(inputStdin) {
		inputString += inputStdin;
	});

	process.stdin.on('end', function() {
		inputString = inputString.split('\n');

		main();
	});

	function readLine() {
		return inputString[currentLine++];
	}

	/*
	 * Complete the 'birthdayCakeCandles' function below.
	 *
	 * The function is expected to return an INTEGER.
	 * The function accepts INTEGER_ARRAY candles as parameter.
	 */

	function birthdayCakeCandles(candles) {
		let count = 1;
			let max = candles[0]
			for(let i = 1; i < candles.length; i++) {
				if (max < candles[i]) {
					max = candles[i];
					count = 1;
				}
				else if(max == candles[i]) {
					count++;
				}
			}

			return count;
	}

	function main() {
		const ws = fs.createWriteStream(process.env.OUTPUT_PATH);

		const candlesCount = parseInt(readLine().trim(), 10);

		const candles = readLine().replace(/\s+$/g, '').split(' ').map(candlesTemp => parseInt(candlesTemp, 10));

		const result = birthdayCakeCandles(candles);

		ws.write(result + '\n');

		ws.end();
	}

9.time conversion
	'use strict';

	const fs = require('fs');

	process.stdin.resume();
	process.stdin.setEncoding('utf-8');

	let inputString = '';
	let currentLine = 0;

	process.stdin.on('data', function(inputStdin) {
		inputString += inputStdin;
	});

	process.stdin.on('end', function() {
		inputString = inputString.split('\n');

		main();
	});

	function readLine() {
		return inputString[currentLine++];
	}

	/*
	 * Complete the 'timeConversion' function below.
	 *
	 * The function is expected to return a STRING.
	 * The function accepts STRING s as parameter.
	 */

	function timeConversion(time) {
		var pm = time.toString().toLowerCase().indexOf('pm')>-1 ;
			time = time.toString().toLowerCase().replace(/[ap]m/,'').split(':') ;
			time[0] = Number(time[0]);
				if((pm == true && time[0]!=12)) time[0] += 12;
				else if(!pm && time[0]==12) time[0] = '00'  ;
				if(String(time[0]).length==1) time[0] = '0'+time[0] ;
			return time.join(':');
	}

	function main() {
		const ws = fs.createWriteStream(process.env.OUTPUT_PATH);

		const s = readLine();

		const result = timeConversion(s);

		ws.write(result + '\n');

		ws.end();
	}

10. Grading students
		'use strict';

		const fs = require('fs');

		process.stdin.resume();
		process.stdin.setEncoding('utf-8');

		let inputString = '';
		let currentLine = 0;

		process.stdin.on('data', function(inputStdin) {
			inputString += inputStdin;
		});

		process.stdin.on('end', function() {
			inputString = inputString.split('\n');

			main();
		});

		function readLine() {
			return inputString[currentLine++];
		}

		/*
		 * Complete the 'gradingStudents' function below.
		 *
		 * The function is expected to return an INTEGER_ARRAY.
		 * The function accepts INTEGER_ARRAY grades as parameter.
		 */

		function gradingStudents(grades) {
			// Write your code here
			let a;
			let b;
			for(let i = 0; i < grades.length; i++) {
				if(grades[i]>37) {
				a = grades[i] % 5    
				b = parseInt(grades[i] / 5) ;
				if (a >= 3 && a<=5) {
					grades[i]  = b * 5 + 5;
				}   
			}
			}
			return grades;
			
		}

		function main() {
			const ws = fs.createWriteStream(process.env.OUTPUT_PATH);

			const gradesCount = parseInt(readLine().trim(), 10);

			let grades = [];

			for (let i = 0; i < gradesCount; i++) {
				const gradesItem = parseInt(readLine().trim(), 10);
				grades.push(gradesItem);
			}

			const result = gradingStudents(grades);

			ws.write(result.join('\n') + '\n');

			ws.end();
		}

11. Apple and Orange
	'use strict';

	process.stdin.resume();
	process.stdin.setEncoding('utf-8');

	let inputString = '';
	let currentLine = 0;

	process.stdin.on('data', function(inputStdin) {
		inputString += inputStdin;
	});

	process.stdin.on('end', function() {
		inputString = inputString.split('\n');

		main();
	});

	function readLine() {
		return inputString[currentLine++];
	}

	/*
	 * Complete the 'countApplesAndOranges' function below.
	 *
	 * The function accepts following parameters:
	 *  1. INTEGER s
	 *  2. INTEGER t
	 *  3. INTEGER a
	 *  4. INTEGER b
	 *  5. INTEGER_ARRAY apples
	 *  6. INTEGER_ARRAY oranges
	 */

	function countApplesAndOranges(s, t, a, b, apples, oranges) {
		let countA = 0;
		let countO = 0; 
		for(let i = 0; i < apples.length; i++) {
			apples[i] += a; 
			if(apples[i] >= s && apples[i] <= t) {
				countA++;
			}
		}
		for(let i = 0; i < oranges.length; i++) {
			oranges[i] += b; 
			if(oranges[i] >= s && oranges[i] <= t) {
				countO++;
			}
		}
		console.log(countA);
		console.log(countO);
	}

	function main() {
		const firstMultipleInput = readLine().replace(/\s+$/g, '').split(' ');

		const s = parseInt(firstMultipleInput[0], 10);

		const t = parseInt(firstMultipleInput[1], 10);

		const secondMultipleInput = readLine().replace(/\s+$/g, '').split(' ');

		const a = parseInt(secondMultipleInput[0], 10);

		const b = parseInt(secondMultipleInput[1], 10);

		const thirdMultipleInput = readLine().replace(/\s+$/g, '').split(' ');

		const m = parseInt(thirdMultipleInput[0], 10);

		const n = parseInt(thirdMultipleInput[1], 10);

		const apples = readLine().replace(/\s+$/g, '').split(' ').map(applesTemp => parseInt(applesTemp, 10));

		const oranges = readLine().replace(/\s+$/g, '').split(' ').map(orangesTemp => parseInt(orangesTemp, 10));

		countApplesAndOranges(s, t, a, b, apples, oranges);
	}

12.